# ============================================================================
#        __
#   \\__/ o\    (C) 2020-2025  Robert Finch, Waterloo
#    \  __ /    All rights reserved.
#     \/_//     robfinch<remove>@finitron.ca
#       ||
#  
#
# BSD 3-Clause License
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ============================================================================

#------------------------------------------------------------------------------
# IAllocTCB is called from the timer ISR. It must preserve any registers used.
#------------------------------------------------------------------------------

IAllocTCB:
	push %a1-%a2
	load. %a0,FreeTCB
	peq	%cr0,.0001
	load %a1,TCBNext[%a0]
	stptr	%a1,FreeTCB
.0001:
	pop %a1-%a2
	ret

# Not called from anywhere

FMTK_AllocTCB:
	blr %br1
	
#------------------------------------------------------------------------------
# IFreeTCB is called from SelectTaskToRun (timer ISR)
#
# Parameters:
#		a0 = pointer to TCB to insert
#------------------------------------------------------------------------------

IFreeTCB:
	push %a1-%a2
	load %a1,FreeTCB
	stptr %a1,TCBNext[%a0]
	stptr	%a0,FreeTCB
	pop %a1-%a2
	ret

#------------------------------------------------------------------------------
# FreeTCB does not actually free the TCB, instead it flags it as needed to be
# freed, and the scheduler frees it. It was done this way to avoid the need
# to lock the list with a semaphore which would cause a deadlock.
#
# Parameters:
#		a0 = task id to insert
#------------------------------------------------------------------------------

FMTK_FreeTCB:
	macTCBHandleToPointer
	cmp %cr0,%a0,0
	ple %cr0,.0001
	stbi TSC_FREE,TCBTsCmd[%a0]
	loadi %a0,E_Ok
	b EnvExitLight
.0001:
	loadi %a0,E_NotAlloc
	b EnvExitLight

#------------------------------------------------------------------------------
# Push task into ready queue. The ready queue is a hardware component on the
# bus.
#
# Stack Space:
#		1 words
# Modifies:
#		none
# Parameters:
#		a0 = pointer to TCB to insert
#------------------------------------------------------------------------------

InsertIntoReadyQueue:
	cmpi %cr0,%a0,0
	ble %cr0,%br1
	ldbz %a1,TCBPriority[%a0]
	loadi %a4,TS_RUNNING
	addi %a0,%a0,TCBStatus
	amoorb %r0,%a4,[%a0]
	addi %a0,%a0,-TCBStatus
	andi %a1,%a1,63							# safety, 0 to 63 for priority
	slli %a1,%a1,2
	store %a0,RDYQ[%a1]
	ret

#------------------------------------------------------------------------------
# Remove task from ready queue. Accomplished by clearing the ready / running
# status. The next time the queue is popped, the task will be discarded as
# a choice for running.
#
# Parameters:
#		a0 = pointer to TCB to remove
#------------------------------------------------------------------------------

RemoveFromReadyQueue:
	cmpi %cr0,%a0,0							# sanity check
	beq %cr0,%br1
	loadi %a1,~(TS_RUNNING|TS_READY)
	addi %a0,%a0,TCBStatus
	amoandb %r0,%a1,[%a0]
	addi %a0,%a0,-TCBStatus
	ret
	
#------------------------------------------------------------------------------
# Remove a task from the timeout list.
# Called when a mailbox is freed and a task is waiting at the
# mailbox.
#
# Parameters:
#		a0 = pointer to TCB
# Modifies:
#		none
# Returns:
#		none
#------------------------------------------------------------------------------

RemoveFromTimeoutList:
	enter %a0,%a4,0
	load %a1,TImeoutList
	cmpa %cr0,%a0,%a1					# head of list?
	beq	%cr0,.0001
	move %a2,%a0							# %a2 points to arg
	# We want
	# arg->next->prev = arg->prev
	# arg->prev->next = arg->next
	load %a0,TCBNext[%a2]
	move %a1,%a0
	load %a0,TCBPrev[%a2]
	move %a3,%a0
	# Here:
	# %a1 = arg->next
	# %a3 = arg->prev
	load %a4,TCBPrev[%a2]
	stptr %a4,TCBPrev[%a3]
	load %a4,TCBNext[%a2]
	stptr %a4,TCBNext[%a1]
	b	.0002
	# Removing from head of timeout list
.0001:
	load %a1,TCBNext[%a0]
	stptr	%a1,TimeoutList		# set new head of list
	move %a2,%a0
	move %a0,%a1
	stptr	%r0,TCBPrev[%a0]		# next->prev = NULL
.0002:
	stptr	%r0,TCBNext[%a2]		# arg->next = NULL
	stptr %r0,TCBPrev[%a2]		# arg->prev = NULL
	exit %a0,%a4,0
	
#// ----------------------------------------------------------------------------
#// Pop the top entry from the timeout list.
#// ----------------------------------------------------------------------------
#
#hTCB PopTimeoutList()
#{
#    TCB *p;
#    hTCB h;
#
#    h = TimeoutList;
#    if (TimeoutList > 0 && TimeoutList < NR_TCB) {
#        TimeoutList = tcbs[TimeoutList].next;
#        if (TimeoutList >= 0 && TimeoutList < NR_TCB) {
#            tcbs[TimeoutList].prev = h->prev;
#            h->prev->next = TimeoutList;
#        }
#    }
#    return h;
#}
#
# Returns:
#		B = task at top of list
#

PopTimeoutList:
	enter %a0,%a3,0
	load. %a0,TimeoutList
	beq	%cr0,.0001
	load. %a1,TCBNext[%a0]
	load %a2,TCBPrev[%a0]
	stptr %a1,TimeoutList
	peq	%cr0,.0001
	move %a3,%a0
	move %a0,%a1
	stptr %a2,TCBPrev[%a0]
	move %a0,%a2
	stptr %a1,TCBNext[%a0]
	stptr %r0,TCBPrev[%a3]
	stptr %r0,TCBNext[%a3]
.0001:
	exit %a0,%a3,0

# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------

DispTwoSpace:
	push %br1
	bl DispSpace
	pop %br1
DispSpace:
	loadi %a0,MF_OUTCH
	loadi %a1,' '
	ecall $11
	ret

DumpTCBs:
	enter %a0,%a3,0
	loadi %a0,MF_CRLF
	ecall $11
	loadi %a0,tcbs
.0002:
	move %a3,%a0
	load %a1,TCBtid[%a0]
	loadi %a0,MF_DisplayTetraAsHex
	ecall $11
	bl DispSpace
	loadi %a0,MF_DisplayByteAsHex
	ldbz %a2,TCBStatus[%a3]
	ecall $11
	bl DispTwoSpace
	loadi %a0,MF_CRLF
	ecall $11
	load. %a0,TCBNext[%a3]
	bne %cr0,.0002			# could use PRED here
.0001:
	exit %a0,%a3,0
	
.byte	"TID Stat"

